(function () {

	'use strict';

	angular.module('app', [
		'app.core', 
		'app.home', 
		'app.layout',
		'app.pessoa',
		'app.demanda',
		'app.login',
		'app.tipo-demanda',
		'app.situacao',
		'angularFileUpload']);

})();
(function () {
	'use strict';

	angular.module('app.layout', []);
})();
(function () {

	'use strict';

	angular
		.module('app.layout')
		.directive('rodape', rodape);

	function rodape() {
		var directive = {
			restrict: 'E',
			templateUrl: 'src/app/layout/rodape.html'
		};

		return directive;
	}

})();
(function () {

	'use strict';

	angular
		.module('app.layout')
		.directive('menuTopo', menuTopo);

	function menuTopo() {
		var directive = {
			restrict: 'E',
			templateUrl: 'src/app/layout/menu-topo.html'
		};

		return directive;
	}

})();
(function () {

	'use strict';

	angular
		.module('app.layout')
		.directive('cabecalho', cabecalho);

	function cabecalho() {
		var directive = {
			restrict: 'E',
			templateUrl: 'src/app/layout/cabecalho.html'
		};

		return directive;
	}

})();
(function () {

	'use strict';

	angular
		.module('app.layout')
		.directive('lista', lista);

	function lista() {
		var directive = {
			restrict: 'E',
			templateUrl: 'src/app/layout/lista.html'
		};

		return directive;
	}

})();
(function () {

	'use strict';

	angular
		.module('app.layout')
		.directive('btnRemover', btnRemover);

	function btnRemover() {
		var directive = {
			restrict: 'E',
			templateUrl: 'src/app/layout/btn-remover.html'
		};

		return directive;
	}

})();
(function () {

	'use strict';

	angular
		.module('app.layout')
		.directive('btnEditar', btnEditar);

	function btnEditar() {
		var directive = {
			restrict: 'E',
			templateUrl: 'src/app/layout/btn-editar.html'
		};

		return directive;
	}

})();
(function () {

	'use strict';

	angular
		.module('app.layout')
		.directive('uploadArquivo', uploadArquivo);

	function uploadArquivo() {
		var directive = {
			restrict: 'E',
			templateUrl: 'src/app/layout/upload-arquivo.html'
		};

		return directive;
	}

})();
(function () {
	
	'use strict';

	angular.module('app.core', [
		'ngRoute', 
		'ngCpfCnpj', 
		'ui.mask', 
		'datatables', 
		'datatables.bootstrap', 
		'core.utils', 
		'angular-loading-bar',
		'ngStorage',
		'angular-jwt',
		'core.auth']);

})();
(function () {

	'use strict';

	angular
		.module('app')
		.run(appRun)
		.config(routes)
		.config(loading);

	appRun.$inject = ['$rootScope', '$location', '$route', 'AuthToken'];
	loading.$inject = ['cfpLoadingBarProvider'];
	routes.$inject = ['$routeProvider', '$locationProvider'];

	function appRun($rootScope, $location, $route, AuthToken) {
		setRouteEvents();

		function routeChangeError() {
	   		// console.log('Route Change Error');
	   	}

	   	function routeChangeStart(event, next, current) {
	   		if (!next.notSecured) {
	   			if (!AuthToken.ler()) {
	   				$rootScope.$evalAsync(function () {
	   					$location.path('/login');
	   				});
	   			}
	   		}
	   	}

	   	function routeChangeSuccess(event, current) {
	   		$rootScope.cabecalho = current.cabecalho;
			$rootScope.titulo = current.titulo;
	   	}

		function setRouteEvents() {
	   		$rootScope.$on('$routeChangeError', routeChangeError);
			$rootScope.$on('$routeChangeStart', routeChangeStart);
			$rootScope.$on('$routeChangeSuccess', routeChangeSuccess);	
	   	}
	}

	function loading(cfpLoadingBarProvider) {
        cfpLoadingBarProvider.parentSelector = '#loading-bar-container';
        cfpLoadingBarProvider.spinnerTemplate = '<div id="loader-wrapper"><h4><img style="width: 100px;" src="src/app/layout/img/core/logo.png" /><br/><img src="src/app/layout/img/core/loader.gif"/></h4></div>';
	}


	function routes($routeProvider, $locationProvider) {
		$routeProvider
			.when('/', {
				templateUrl: 'src/app/home/home.html',
				controller: 'Home',
				controllerAs: 'vm',
				titulo: 'Página Inicial',
				cabecalho: {
					h1: 'Página Inicial',
					breadcrumbs: [
						{
							nome: 'Página Inicial',
							link: '/',
							ativo: true
						}
					]
				}
			})
			.otherwise({
				redirectTo: '/'
			});

		$locationProvider.html5Mode(true);
	}

})();
(function () {
	'use strict';

	var core = angular.module('app.core');

	var configuracaoREST = {
		demanda: 'demanda/',
		pessoa: 'pessoa/',
		tipoDemanda: 'tipo-demanda/',
		url: 'http://localhost/mathias/server/'
		// url: 'http://sistema.mathiasbertram.com.br/server/'
	};

	var datepicker = {
	    dateFormat: 'dd/mm/yy',
	    dayNames: ['Domingo', 'Segunda', 'Terça','Quarta', 'Quinta', 'Sexta','Sábado'],
	    dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
	    dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua','Qui', 'Sex', 'Sáb', 'Dom'],
	    monthNames: ['Janeiro', 'Fevereiro', 'Março','Abril', 'Maio', 'Junho','Julho', 'Agosto', 'Setembro','Outubro', 'Novembro', 'Dezembro'],
	    monthNamesShort: ['Jan', 'Fev', 'Mar','Abr', 'Mai', 'Jun','Jul', 'Ago', 'Set','Out', 'Nov', 'Dez'],
	    nextText: 'Próximo',
	    prevText: 'Anterior',
	    maxDate: "-0D"
	};

	var datepickerSemLimite = {
	    dateFormat: 'dd/mm/yy',
	    dayNames: ['Domingo', 'Segunda', 'Terça','Quarta', 'Quinta', 'Sexta','Sábado'],
	    dayNamesMin: ['D', 'S', 'T', 'Q', 'Q', 'S', 'S', 'D'],
	    dayNamesShort: ['Dom', 'Seg', 'Ter', 'Qua','Qui', 'Sex', 'Sáb', 'Dom'],
	    monthNames: ['Janeiro', 'Fevereiro', 'Março','Abril', 'Maio', 'Junho','Julho', 'Agosto', 'Setembro','Outubro', 'Novembro', 'Dezembro'],
	    monthNamesShort: ['Jan', 'Fev', 'Mar','Abr', 'Mai', 'Jun','Jul', 'Ago', 'Set','Out', 'Nov', 'Dez'],
	    nextText: 'Próximo',
	    prevText: 'Anterior'
	};

	var datatables = {
		ptbr: {
		    "sEmptyTable": "Nenhum registro encontrado",
		    "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
		    "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
		    "sInfoFiltered": "(Filtrados de _MAX_ registros)",
		    "sInfoPostFix": "",
		    "sInfoThousands": ".",
		    "sLengthMenu": "_MENU_ resultados por página",
		    "sLoadingRecords": "Carregando...",
		    "sProcessing": "Processando...",
		    "sZeroRecords": "Nenhum registro encontrado",
		    "sSearch": "Pesquisar",
		    "oPaginate": {
		        "sNext": "Próximo",
		        "sPrevious": "Anterior",
		        "sFirst": "Primeiro",
		        "sLast": "Último"
		    },
		    "oAria": {
		        "sSortAscending": ": Ordenar colunas de forma ascendente",
		        "sSortDescending": ": Ordenar colunas de forma descendente"
		    }
		}
	};

	core.constant('configuracaoREST', configuracaoREST);
	core.constant('toastr', toastr);
	core.constant('datatables', datatables);
	core.constant('datepicker', datepicker);
	core.constant('datepickerSemLimite', datepickerSemLimite);
})();
(function () {
	'use strict';

	angular.module('core.utils', []);
})();
(function () {
	'use strict';

	angular
		.module('core.utils')
		.factory('getData', getData);

	function getData() {
		var service = {
			get: get
		};

		return service;

		function get(data, value) {

			if (value === undefined) {
				return data.data.data;
			}

			return data.data.data[value];
		}
	}
})();
(function () {
	'use strict';

	angular
		.module('core.utils')
		.factory('tabelaUtils', tabelaUtils);

	tabelaUtils.$inject = ['$compile', 'DTColumnBuilder', 'DTOptionsBuilder', '$httpParamSerializer', '$http', 'datatables'];

	function tabelaUtils($compile, DTColumnBuilder, DTOptionsBuilder, $httpParamSerializer, $http, datatables) {
		var service = {
			criarBotaoPadrao: criarBotaoPadrao,
			criarColunas: criarColunas,
			criarTabela: criarTabela,
			criarParametrosGet: criarParametrosGet,
			recarregarDados: recarregarDados
		};

		return service;

		function criarBotaoPadrao() {
			return '<div class="text-center"><btn-editar class="editar"></btn-editar>&nbsp;<btn-remover class="remover"></btn-remover></div>';
		}

		function criarColunas(colunas) {
			var dtColumns = [];

			angular.forEach(colunas, function (value, key) {
				var column = DTColumnBuilder.newColumn(value[0]).withTitle(value[1]);

				if (value.length === 3) {
					column.renderWith(value[2]);
				}

				dtColumns.push(column);
			});

			return dtColumns;
		}

		function criarParametrosGet(request) {

			var data = {
				request: request
			};

			return $httpParamSerializer(data);
		}

		function criarTabela(ajax, vm, remover, nomeArrayRetorno, carregarObjeto) {
			return DTOptionsBuilder.newOptions()
				.withOption('ajax', ajax)
				.withPaginationType('full_numbers')
				.withOption('createdRow', createdRow)
				.withOption('rowCallback', rowCallback)
		        .withLanguage(datatables.ptbr)
				.withBootstrap();

			function createdRow(row, data, dataIndex) {
	    		$compile(angular.element(row).contents())(vm);
			}

			function rowCallback(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
				$('.remover', nRow).unbind('click');
				$('.remover', nRow).bind('click', function () {
					evtRemover(aData, remover);
				});

				$('.editar', nRow).unbind('click');
				$('.editar', nRow).bind('click', function () {
					carregarObjeto(aData);
				});
			}

			function evtRemover(aData, remover) {
				$.confirm({
				    text: "Você tem certeza que deseja remover?",
				    title: "Confirmação",
				    confirm: function(button) {
				        remover(aData);
				    },
			        confirmButtonClass: "btn-danger btn-flat",
			        cancelButtonClass: "btn-default btn-flat",
				    confirmButton: "Sim, tenho certeza!",
				    cancelButton: "Não",
				    dialogClass: "modal-dialog modal-lg"
				});
			}
		}

		function recarregarDados(dtInstance) {
			var resetPaging = false;
			dtInstance.reloadData(null, resetPaging);
		}
	}

})();
(function () {
	'use strict';

	var defaultMessage = {
		EMPTY_DATA: 'Não foi possível se conectar ao serviço.',
		SUCCESS: 'Sucesso ao efetuar a operação.',
		ERROR: 'Ocorreu um erro ao efetuar a operação.'
	};

	var messageType = {
		INFO: "info",
		SUCCESS: "success",
		WARNING: "warning",
		ERROR: "error"
	};

	angular
		.module('core.utils')
		.constant('DefaultMessage', defaultMessage)
		.constant('MessageType', messageType);
		
})();
(function () {
	'use strict';

	angular
		.module('core.utils')
		.factory('messageUtils', messageUtils);

	messageUtils.$inject = ['DefaultMessage', 'MessageType', 'toastr'];

	function messageUtils(DefaultMessage, MessageType, toastr) {
		var service = {
			feedMessage: feedMessage,
			feed: feed,
			type: MessageType
		};

		initToastr();

		return service;

		function feed(type, message) {
			toastr[type](message);
		}

		function feedDefault(executed) {
			if (executed) {
				toastr[MessageType.SUCCESS](DefaultMessage.SUCCESS);
			} else {
				toastr[MessageType.ERROR](DefaultMessage.ERROR);
			}
		}

		function feedMessage(response) {
			var data = response.data || {};
			
			if (angular.equals({}, data)) {
				toastr[MessageType.ERROR](DefaultMessage.EMPTY_DATA);
				return;
			} 

			var message = data.message || [];

			if (message.length > 0) {
				angular.forEach(message, function (value, key) {
					toastr[value.tipo.toLowerCase()](value.mensagem);
				});
			} else {
				var executed = typeof data.executed === 'boolean' ? data.executed : false;
				feedDefault(executed);
			}
		}

		function initToastr() {
			toastr.options.timeOut = 3000;
			toastr.options.progressBar = true;
			toastr.options.closeButton = true;
	        toastr.options.positionClass = 'toast-bottom-right';
	        toastr.options.preventDuplicates = true;
		}
	}

})();
(function () {
	'use strict';

	angular
		.module('core.utils')
		.factory('multiPromise', multiPromise);

	multiPromise.$inject = ['$q'];

	function multiPromise($q) {
		var isPrimed = false;
		var primePromise;

		var service = {
			ready: ready
		};

		return service;

		function prime() {
            if (primePromise) {
                return primePromise;
            }

            primePromise = $q.when(true).then(success);
            return primePromise;

            function success() {
                isPrimed = true;
            }
        }

		function ready(nextPromises) {
            var readyPromise = primePromise || prime();
            return readyPromise.then(success).catch(error);

            function error() {
                return $q.reject();
            }

            function success() {
                return $q.all(nextPromises); 
            }
        }
	}
})();
(function () {
	'use strict';

	angular
		.module('core.utils')
		.factory('promise', promise);

	function promise() {
		var service = {
			criar: criar
		};

		return service;

		function criar(exec, objeto) {
			var retorno = {};
			retorno.exec = exec;
			retorno.objeto = objeto;
			return retorno;
		}
	}

})();
(function () {

	angular
		.module('core.utils')
		.factory('controllerUtils', controllerUtils);

	controllerUtils.$inject = [
		'getData',
		'messageUtils',
		'$routeParams',
		'multiPromise',
		'$location',
		'$q',
		'promise'];

	function controllerUtils(getData, messageUtils, $routeParams, multiPromise, $location, $q, promise) {
		var service = {
			getData: getData.get,
			feedMessage: messageUtils.feedMessage,
			feed: messageUtils.feed,
			messageType: messageUtils.type,
			feed: messageUtils.feed,
			$routeParams: $routeParams,
			ready: multiPromise.ready,
			$q: $q,
			promise: promise,
			$location: $location
		};	

		return service;
	}
})();
(function () {
	'use strict';

	angular.module('core.auth', []);
})();
(function () {
	'use strict';

	angular
		.module('core.auth')
		.factory('AuthToken', AuthToken);

	AuthToken.$inject = ['$sessionStorage'];

	function AuthToken($sessionStorage) {
		var service = {
			remover: remover,
			ler: ler,
			setar: setar
		};

		return service;

		function remover() {
			delete $sessionStorage.token;
		}

		function ler() {
			return $sessionStorage.token;			
		}

		function setar(token) {
			$sessionStorage.token = token;
		}
	}
})();	
(function () {
	'use strict';

	angular
		.module('core.auth')
		.factory('AuthInterceptor', AuthInterceptor)
		.config(http);

	AuthInterceptor.$inject = ['$location', '$q', 'AuthToken', 'toastr', '$timeout'];
	http.$inject = ['$httpProvider'];

	function AuthInterceptor($location, $q, AuthToken, toastr, $timeout) {
		var service = {
			request: request,
			responseError: responseError
		};

		return service;

		function request(config) {
			config.headers = config.headers || {};
			if (AuthToken.ler()) {
				config.headers.Authorization = 'Bearer ' + AuthToken.ler();
			}

			return config;
		}

		function responseError(response) {
			if (response.status === 401 || response.status === 403) {
				AuthToken.remover();
				$location.path('/login');
				$timeout(function () {
					toastr.remove();
					toastr['error']('Sua sessão expirou, logue novamente.');
				}, 1);
			}

			return $q.reject(response);
		}
	}

	function http($httpProvider) {
		$httpProvider.interceptors.push('AuthInterceptor');
	}
})();
(function () {
	'use strict';

	angular
		.module('app.layout')
		.controller('MenuTopoController', MenuTopoController);

	MenuTopoController.$inject = ['AuthToken', 'controllerUtils'];

	function MenuTopoController(AuthToken, controllerUtils) {
		var vm = this;
		vm.isLogged = isLogged;
		vm.sair = sair;

		function isLogged() {
			return !!AuthToken.ler();
		}

		function sair() {
			AuthToken.remover();
			controllerUtils.$location.path('/login');
		}
	}
	
})();
(function () {

	'use strict';

	angular
		.module('app.login', []);

})();
(function () {

	'use strict';

	angular
		.module('app')
		.config(routes);

	routes.$inject = ['$routeProvider', '$locationProvider'];

	function routes($routeProvider, $locationProvider) {
		$routeProvider
			.when('/login', {
				templateUrl: 'src/app/login/login.html',
				controller: 'Login',
				controllerAs: 'vm',
				notSecured: true
			});
	}

})();
(function () {
	'use strict';

	angular
		.module('app.login')
		.factory('loginRest', dataservice);

	dataservice.$inject = ['$http', '$location', '$q', 'configuracaoREST', '$httpParamSerializer'];

	function dataservice($http, $location, $q, configuracaoREST, $httpParamSerializer) {
		var service = {
			logar: logar
		};

		return service;

		function logar(data) {
			return $http.post(configuracaoREST.url + 'login/entrar', data);
		}
	}
})();
(function () {

	'use strict';

	angular
		.module('app.login')
		.controller('Login', Login);

	Login.$inject = ['loginRest', 'controllerUtils', 'AuthToken', '$rootScope', 'jwtHelper'];

	function Login(loginRest, controllerUtils, AuthToken, $rootScope, jwtHelper) {
		var vm = this;

		vm.logar = logar;
		vm.usuario = {};

		function logar(formulario) {
			$rootScope.usuarioLogado = {};
			loginRest.logar(vm.usuario).then(success).catch(error);

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao entrar no sistema.');
			}

			function success(response) {
				controllerUtils.feedMessage(response);
				if (response.data.status == 'true') {
					AuthToken.setar(response.data.data.token);

					var payload = jwtHelper.decodeToken(response.data.data.token);
					$rootScope.usuarioLogado.nome = payload.nome;
					$rootScope.usuarioLogado.cargo = payload.cargo;
					$rootScope.usuarioLogado.imagem = payload.imagem;


					controllerUtils.$location.path('/');
				}
			}
		}
	}

})();
(function () {
	'use strict';

	angular.module('app.home', []);
})();
(function () {
	'use strict';

	angular
		.module('app.home')
		.controller('Home', Home);

	function Home() {}
})();
(function () {
	'use strict';

	angular
		.module('app.pessoa', []);
})();
(function () {

	'use strict';

	angular
		.module('app')
		.config(routes);

	routes.$inject = ['$routeProvider', '$locationProvider'];

	function routes($routeProvider, $locationProvider) {
		$routeProvider
			.when('/pessoa', {
				templateUrl: 'src/app/pessoa/pessoa-lista.html',
				controller: 'PessoaLista',
				controllerAs: 'vm',
				titulo: 'Pessoas',
				cabecalho: {
					h1: 'Pessoas',
					breadcrumbs: [
						{
							nome: 'Pessoas',
							link: 'pessoa',
							ativo: true
						}
					]
				}
			})
			.when('/nova-pessoa', {
				templateUrl: 'src/app/pessoa/pessoa-form.html',
				controller: 'PessoaForm',
				controllerAs: 'vm',
				titulo: 'Cadastro de Pessoa',
				cabecalho: {
					h1: 'Cadastro de Pessoa',
					breadcrumbs: [
						{
							nome: 'Pessoas',
							link: 'pessoa'
						},
						{
							nome: 'Cadastro',
							link: 'nova-pessoa',
							ativo: true
						}
					]
				}
			})
			.when('/nova-pessoa/:id', {
				templateUrl: 'src/app/pessoa/pessoa-form.html',
				controller: 'PessoaForm',
				controllerAs: 'vm',
				titulo: 'Cadastro de Pessoa',
				cabecalho: {
					h1: 'Cadastro de Pessoa',
					breadcrumbs: [
						{
							nome: 'Pessoas',
							link: 'pessoa'
						},
						{
							nome: 'Cadastro',
							link: 'nova-pessoa',
							ativo: true
						}
					]
				}
			});
	}

})();
(function () {
	'use strict';

	angular
		.module('app.pessoa')
		.factory('pessoaRest', dataservice);

	dataservice.$inject = ['$http', '$location', '$q', 'configuracaoREST', '$httpParamSerializer'];

	function dataservice($http, $location, $q, configuracaoREST, $httpParamSerializer) {
		var service = {
			atualizar: atualizar,
			buscar: buscar,
			buscarCombo: buscarCombo,
			buscarComboBairro: buscarComboBairro,
			buscarComboFiltro: buscarComboFiltro,
			buscarComboTipoPessoa: buscarComboTipoPessoa,
			buscarComboCidade: buscarComboCidade,
			buscarComboLogradouro: buscarComboLogradouro,
			buscarTodos: buscarTodos,
			remover: remover,
			salvar: salvar
		};

		return service;

		function atualizar(id, data) {
			return $http.put(configuracaoREST.url + configuracaoREST.pessoa + 'atualizar/' + id, data);
		}

		function buscar(data) {	
			return $http.get(configuracaoREST.url + configuracaoREST.pessoa + data);
		}

		function buscarComboTipoPessoa() {
			return $http.get(configuracaoREST.url + 'tipo-pessoa');
		}	

		function buscarCombo() {
			return $http.get(configuracaoREST.url + 'pessoa/combo');
		}	

		function buscarComboFiltro(filtro) {
			return $http.post(configuracaoREST.url + 'pessoa/filtro', filtro);
		}	

		function buscarComboBairro(cidade) {
			return $http.get(configuracaoREST.url + 'endereco/bairro/' + cidade);
		}	

		function buscarComboLogradouro(bairro) {
			return $http.get(configuracaoREST.url + 'endereco/logradouro/' + bairro);
		}	

		function buscarComboCidade() {
			return $http.get(configuracaoREST.url + 'endereco/cidade');
		}	

		function buscarTodos(data) {
			return $http.get(configuracaoREST.url + configuracaoREST.pessoa);
		}

		function remover(data) {
			return $http.delete(configuracaoREST.url + configuracaoREST.pessoa + 'excluir/' + data);
		}

		function salvar(data) {
			return $http.post(configuracaoREST.url + configuracaoREST.pessoa + 'salvar', data);
		}
	}
})();
(function () {

	'use strict';

	angular
		.module('app.pessoa')
		.factory('pessoaDto', dto);

	function dto() {
		var service = {
			criarAtualizar: criarAtualizar,
			criarCarregar: criarCarregar
		};

		return service;

		function criarAtualizar(objeto) {
			console.log(objeto);

			var dto = {};

			dto.nome = objeto.nome;
			dto.email = objeto.email;

			if (objeto.cnpj) {
				dto.cnpj = objeto.cnpj;
			}
			
			if (objeto.cpf) {
				dto.cpf = objeto.cpf;
			}
			
			if (objeto.telefone) {
				dto.telefone = objeto.telefone;
			}

			if (objeto.celular) {
				dto.celular = objeto.celular;
			}

			if (objeto.cidade) {

				if (objeto.cidade.id_cidade) {
					dto.cidade = objeto.cidade.id_cidade;
				} else {
					dto.cidade = objeto.cidade;
				}

			}
			
			dto.fgTipoPessoa = objeto.fgTipoPessoa;

			if (objeto.bairro) {

				if (objeto.bairro.id_bairro) {
					dto.bairro = objeto.bairro.id_bairro;
				} else {
					dto.bairro = objeto.bairro;
				}

			}

			if (objeto.logradouro) {

				if (objeto.logradouro.id_logradouro) {
					dto.logradouro = objeto.logradouro.id_logradouro;
				} else {
					dto.logradouro = objeto.logradouro;
				}

			}

			if (objeto.tipoPessoa) {

				if (objeto.tipoPessoa.id_tipo_pessoa) {
					dto.tipoPessoa = objeto.tipoPessoa.id_tipo_pessoa;
				} else {
					dto.tipoPessoa = objeto.tipoPessoa;
				}

			}
			
			if (objeto.observacao) {
				dto.observacao = objeto.observacao;
			}

			return dto;
		}

		function criarCarregar(objeto) {
			var dto = objeto;
			
			dto.fgTipoPessoa = objeto.fg_tipo_pessoa == 1 ? 'F' : 'J';
			delete dto.fg_tipo_pessoa;
			
			if (objeto.fgTipoPessoa == 'F') {

				if (objeto.cpf_cnpj) {
					dto.cpf = objeto.cpf_cnpj;
					delete dto.cpf_cnpj;
				}

			} else if (objeto.fgTipoPessoa == 'J') {

				if (objeto.cpf_cnpj) {
					dto.cnpj = objeto.cpf_cnpj;
					delete dto.cpf_cnpj;
				}
				
			}

			dto.tipoPessoa = {id_tipo_pessoa: objeto.id_tipo_pessoa};
			delete dto.id_tipo_pessoa;

			if (objeto.id_cidade) {
				dto.cidade = {id_cidade: objeto.id_cidade};
				delete dto.id_cidade;
			}

			if (objeto.id_bairro) {
				dto.bairro = {id_bairro: objeto.id_bairro};
				delete dto.id_bairro;
			}

			if (objeto.id_logradouro) {
				dto.logradouro = {id_logradouro: objeto.id_logradouro};
				delete dto.id_logradouro;
			}

			return dto;
		}
	}
})();
(function () {
	'use strict';

	angular 
		.module('app.pessoa')
		.controller('PessoaLista', PessoaLista);

	PessoaLista.$inject = [
		'$scope', 
		'pessoaRest', 
		'tabelaUtils', 
		'controllerUtils'];

	function PessoaLista($scope, dataservice, tabelaUtils, controllerUtils) {
		/* jshint validthis: true */
		var vm = this;
		vm.tabela = {};
		vm.instancia = {};

		iniciar();

		function iniciar() {
			montarTabela();
		}

		function montarTabela() {
			criarOpcoesTabela();

			function carregarObjeto(aData) {
				controllerUtils.$location.path('nova-pessoa/' + aData.id_pessoa);
				$scope.$apply();
			}

			function criarColunasTabela() {
				vm.tabela.colunas = tabelaUtils.criarColunas([
					['nome', 'Nome'], 
					['email', 'E-mail'], 
					['celular', 'Celular'], 
					['tipo', 'Tipo'], 
					['id_pessoa', 'Ações', tabelaUtils.criarBotaoPadrao]
				]);
			}

			function criarOpcoesTabela() {
				vm.tabela.opcoes = tabelaUtils.criarTabela(ajax, vm, remover, 'data', carregarObjeto);
				criarColunasTabela();

				function ajax(data, callback, settings) {
					dataservice.buscarTodos(tabelaUtils.criarParametrosGet(data)).then(success).catch(error);

					function error(response) {
						controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao carregar a lista.');
					}

					function success(response) {
						callback(controllerUtils.getData(response, 'datatables'));
					}
				}
			}

			function remover(aData) {
				dataservice.remover(aData.id_pessoa).then(success).catch(error);

				function error(response) {
					controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao remover.');
				}

				function success(response) {
					controllerUtils.feedMessage(response);
					if (response.data.status == 'true') {
						tabelaUtils.recarregarDados(vm.instancia);
					}
				}
			}
		}
	}
})();
(function () {

	'use strict';

	angular.module('app.pessoa')
		.controller('PessoaForm', PessoaForm);

	PessoaForm.$inject = [
		'controllerUtils',
		'pessoaRest',
		'pessoaDto',
		'$scope'];

	function PessoaForm(controllerUtils, dataservice, dto, $scope) {
		/* jshint validthis: true */
		var vm = this;

		vm.atualizar = atualizar;
		vm.carregarBairroList = carregarBairroList;
		vm.carregarLogradouroList = carregarLogradouroList;
		vm.pessoa = {};
		vm.editar = false;
		vm.editar = false;
		vm.cidadeList = [];
		vm.tipoPessoaList = [];
		vm.salvar = salvar;
		vm.voltar = voltar;
		vm.bairroList = [];
		vm.logradouroList = [];

		vm.teste = teste;

		iniciar();

		function teste() {
			console.log(vm.pessoa);
		}

		function atualizar(formulario) {
			dataservice.atualizar(vm.pessoa.id_pessoa, dto.criarAtualizar(vm.pessoa)).then(success).catch(error);

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao atualizar a pessoa.');
			}

			function success(response) {
				controllerUtils.feedMessage(response);

				if (response.data.status == 'true') {
					voltar();
				}
			}
		}

		function carregarPessoa(data) {
			return dataservice.buscar(data).then(success).catch(error);

			function error(response) {
				console.log(response);
				return controllerUtils.promise.criar(false, {});
			}

			function success(response) {
				var departamento = controllerUtils.getData(response, 'PessoaDto');
				var retorno = dto.criarCarregar(departamento);


				$scope.$watch('vm.cidadeList', function() {
					if (vm.cidadeList.length > 0) {
						angular.forEach(vm.cidadeList, function (value, index) {
							if (retorno.cidade) {
								if (value.id_cidade === retorno.cidade.id_cidade) {
									vm.carregarBairroList(vm.pessoa.cidade.id_cidade);
								}
							}
						});
					}
				});

				$scope.$watch('vm.bairroList', function() {
					if (vm.bairroList.length > 0) {
						angular.forEach(vm.bairroList, function (value, index) {
							if (retorno.bairro) {
								if (value.id_bairro === retorno.bairro.id_bairro) {
									vm.carregarLogradouroList(vm.pessoa.bairro.id_bairro);
								}
							}
						});
					}
				});


				return controllerUtils.promise.criar(true, retorno);
			}
		}

		function carregarBairroList(cidade) {
			if (cidade === undefined) {
				vm.bairroList = [];
				return false;
			}

			return dataservice.buscarComboBairro(cidade).then(success).catch(error);

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar os bairros.');
				vm.bairroList = [];
				return [];
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				vm.bairroList = array;
				return array;
			}
		}

		function carregarCidadeList() {
			return dataservice.buscarComboCidade().then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				return controllerUtils.promise.criar(true, array);
			}
		}

		function carregarLogradouroList(bairro) {
			if (bairro === undefined) {
				vm.logradouroList = [];
				return false;
			}

			return dataservice.buscarComboLogradouro(bairro).then(success).catch(error);

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar os logradouros.');
				vm.logradouroList = [];
				return [];
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				vm.logradouroList = array;
				return array;
			}
		}

		function carregarTipoPessoaList() {
			return dataservice.buscarComboTipoPessoa().then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				return controllerUtils.promise.criar(true, array);
			}
		}

		function editarObjeto() {
			vm.editar = !angular.equals({}, controllerUtils.$routeParams);
			return !angular.equals({}, controllerUtils.$routeParams);
		}

		function inicializarObjetos(values) {			
			if (values[0].exec) {
				vm.tipoPessoaList = values[0].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar os tipos.');
			}

			if (values[1].exec) {
				vm.cidadeList = values[1].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar as cidades.');
			}


			if (editarObjeto()) {
				if (values[2].exec) {
					vm.pessoa = values[2].objeto;
				} else {
					controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar os dados da pessoa.');
				}
			}
		}

		function iniciar() {
			var promises = [];

			promises.push(carregarTipoPessoaList());
			promises.push(carregarCidadeList());
			
			if (editarObjeto()) {
				promises.push(carregarPessoa(controllerUtils.$routeParams.id));
			}

			return controllerUtils.ready(promises).then(function (values) {
				vm.pessoa.fgTipoPessoa = "F";
				inicializarObjetos(values);
			});
		}

		function salvar(formulario) {
			if (formulario.$valid) {
				dataservice.salvar(vm.pessoa).then(success).catch(error);
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Dados inválidos.');
			}

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao registrar a pessoa.');
			}

			function success(response) {
				console.log(response);
				controllerUtils.feedMessage(response);

				if (response.data.status == 'true') {
					voltar();
				}
			}
		}

		function voltar() {
			controllerUtils.$location.path('pessoa');
		}
	}

})();
(function () {
	
	'use strict';

	angular.module('app.tipo-demanda', []);

})();
(function () {

	'use strict';

	angular
		.module('app')
		.config(routes);

	routes.$inject = ['$routeProvider', '$locationProvider'];

	function routes($routeProvider, $locationProvider) {
		$routeProvider
			.when('/tipo-demanda', {
				templateUrl: 'src/app/tipo-demanda/tipo-demanda-lista.html',
				controller: 'TipoDemandaLista',
				controllerAs: 'vm',
				titulo: 'Tipos de Demanda',
				cabecalho: {
					h1: 'Tipos de Demanda',
					breadcrumbs: [
						{
							nome: 'Tipos de Demanda',
							link: 'tipo-demanda',
							ativo: true
						}
					]
				}
			})
			.when('/nova-tipo-demanda', {
				templateUrl: 'src/app/tipo-demanda/tipo-demanda-form.html',
				controller: 'TipoDemandaForm',
				controllerAs: 'vm',
				titulo: 'Cadastro de Tipo de Demanda',
				cabecalho: {
					h1: 'Cadastro de Tipo de Demanda',
					breadcrumbs: [
						{
							nome: 'Tipos de Demanda',
							link: 'tipo-demanda'
						},
						{
							nome: 'Cadastro',
							link: 'nova-tipo-demanda',
							ativo: true
						}
					]
				}
			})
			.when('/nova-tipo-demanda/:id', {
				templateUrl: 'src/app/tipo-demanda/tipo-demanda-form.html',
				controller: 'TipoDemandaForm',
				controllerAs: 'vm',
				titulo: 'Cadastro de Tipo de Demanda',
				cabecalho: {
					h1: 'Cadastro de Tipo de Demanda',
					breadcrumbs: [
						{
							nome: 'Tipos de Demanda',
							link: 'tipo-demanda'
						},
						{
							nome: 'Cadastro',
							link: 'nova-tipo-demanda',
							ativo: true
						}
					]
				}
			});
	}

})();
(function () {
	'use strict';

	angular
		.module('app.tipo-demanda')
		.factory('tipoDemandaRest', dataservice);

	dataservice.$inject = ['$http', '$location', '$q', 'configuracaoREST', '$httpParamSerializer'];

	function dataservice($http, $location, $q, configuracaoREST, $httpParamSerializer) {
		var service = {
			atualizar: atualizar,
			buscar: buscar,
			buscarTodos: buscarTodos,
			remover: remover,
			salvar: salvar
		};

		return service;

		function atualizar(id, data) {
			return $http.put(configuracaoREST.url + configuracaoREST.tipoDemanda + 'salvar/' + id, data);
		}

		function buscar(data) {	
			return $http.get(configuracaoREST.url + configuracaoREST.tipoDemanda + data);
		}


		function buscarTodos(data) {
			return $http.get(configuracaoREST.url + configuracaoREST.tipoDemanda);
		}

		function remover(data) {
			return $http.delete(configuracaoREST.url + configuracaoREST.tipoDemanda + 'excluir/' + data);
		}

		function salvar(data) {
			return $http.post(configuracaoREST.url + configuracaoREST.tipoDemanda + 'salvar', data);
		}
	}
})();
(function () {
	'use strict';

	angular 
		.module('app.tipo-demanda')
		.controller('TipoDemandaLista', TipoDemandaLista);

	TipoDemandaLista.$inject = [
		'$scope', 
		'tipoDemandaRest', 
		'tabelaUtils', 
		'controllerUtils'];

	function TipoDemandaLista($scope, dataservice, tabelaUtils, controllerUtils) {
		/* jshint validthis: true */
		var vm = this;
		vm.tabela = {};
		vm.instancia = {};

		console.log('Teste');

		iniciar();

		function iniciar() {
			montarTabela();
		}

		function montarTabela() {
			criarOpcoesTabela();

			function carregarObjeto(aData) {
				controllerUtils.$location.path('nova-tipo-demanda/' + aData.id_tipo_demanda);
				$scope.$apply();
			}

			function criarColunasTabela() {
				vm.tabela.colunas = tabelaUtils.criarColunas([
					['descricao', 'Descrição'], 
					['id_tipo_demanda', 'Ações', tabelaUtils.criarBotaoPadrao]
				]);
			}

			function criarOpcoesTabela() {
				vm.tabela.opcoes = tabelaUtils.criarTabela(ajax, vm, remover, 'data', carregarObjeto);
				criarColunasTabela();

				function ajax(data, callback, settings) {
					dataservice.buscarTodos(tabelaUtils.criarParametrosGet(data)).then(success).catch(error);

					function error(response) {
						controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao carregar a lista.');
					}

					function success(response) {
						callback(controllerUtils.getData(response, 'datatables'));
					}
				}
			}

			function remover(aData) {
				dataservice.remover(aData.id_tipo_demanda).then(success).catch(error);

				function error(response) {
					controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao remover.');
				}

				function success(response) {
					controllerUtils.feedMessage(response);
					if (response.data.status == 'true') {
						tabelaUtils.recarregarDados(vm.instancia);
					}
				}
			}
		}
	}
})();
(function () {

	'use strict';

	angular.module('app.tipo-demanda')
		.controller('TipoDemandaForm', TipoDemandaForm);

	TipoDemandaForm.$inject = [
		'controllerUtils',
		'tipoDemandaRest',
		'$scope'];

	function TipoDemandaForm(controllerUtils, dataservice, $scope) {
		/* jshint validthis: true */
		var vm = this;

		vm.atualizar = atualizar;
		vm.tipoDemanda = {};
		vm.editar = false;
		vm.salvar = salvar;
		vm.voltar = voltar;

		iniciar();

		function atualizar(formulario) {
			dataservice.atualizar(vm.tipoDemanda.id_tipo_demanda, vm.tipoDemanda).then(success).catch(error);

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao atualizar o tipo de demanda.');
			}

			function success(response) {
				controllerUtils.feedMessage(response);

				if (response.data.status == 'true') {
					voltar();
				}
			}
		}

		function carregar(data) {
			return dataservice.buscar(data).then(success).catch(error);

			function error(response) {
				console.log(response);
				return controllerUtils.promise.criar(false, {});
			}

			function success(response) {
				var tipoDemanda = controllerUtils.getData(response, 'TipoDemandaDto');
				return controllerUtils.promise.criar(true, tipoDemanda);
			}
		}

		function editarObjeto() {
			vm.editar = !angular.equals({}, controllerUtils.$routeParams);
			return !angular.equals({}, controllerUtils.$routeParams);
		}

		function inicializarObjetos(values) {			
			if (editarObjeto()) {
				if (values[0].exec) {
					vm.tipoDemanda = values[0].objeto;
				} else {
					controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar os tipos de demanda.');
				}
			}
		}

		function iniciar() {
			var promises = [];
			
			if (editarObjeto()) {
				promises.push(carregar(controllerUtils.$routeParams.id));
			}

			return controllerUtils.ready(promises).then(function (values) {
				inicializarObjetos(values);
			});
		}

		function salvar(formulario) {
			if (formulario.$valid) {
				dataservice.salvar(vm.tipoDemanda).then(success).catch(error);
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Dados inválidos.');
			}

			function error(response) {
				console.log(response);
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao registrar o tipo de demanda.');
			}

			function success(response) {
				console.log(response);
				controllerUtils.feedMessage(response);

				if (response.data.status == 'true') {
					voltar();
				}
			}
		}

		function voltar() {
			controllerUtils.$location.path('tipo-demanda');
		}
	}

})();
(function () {

	angular.module('app.situacao', []);

})();
(function () {
	'use strict';

	angular
		.module('app.situacao')
		.factory('situacaoRest', dataservice);

	dataservice.$inject = ['$http', '$location', '$q', 'configuracaoREST', '$httpParamSerializer'];

	function dataservice($http, $location, $q, configuracaoREST, $httpParamSerializer) {
		var service = {
			buscarCombo: buscarCombo
		};

		return service;

		function buscarCombo() {
			return $http.get(configuracaoREST.url + 'situacao/combo');
		}	
	}
})();
(function () {

	'use strict';

	angular
		.module('app.demanda', []);

})();
(function () {

	'use strict';

	angular
		.module('app')
		.config(routes);

	routes.$inject = ['$routeProvider', '$locationProvider'];

	function routes($routeProvider, $locationProvider) {
		$routeProvider
			.when('/demanda', {
				templateUrl: 'src/app/demanda/demanda-lista.html',
				controller: 'DemandaLista',
				controllerAs: 'vm',
				titulo: 'Demandas',
				cabecalho: {
					h1: 'Demandas',
					breadcrumbs: [
						{
							nome: 'Demandas',
							link: 'demanda',
							ativo: true
						}
					]
				}
			})
			.when('/nova-demanda', {
				templateUrl: 'src/app/demanda/demanda-form.html',
				controller: 'DemandaForm',
				controllerAs: 'vm',
				titulo: 'Cadastro de Demanda',
				cabecalho: {
					h1: 'Cadastro de Demanda',
					breadcrumbs: [
						{
							nome: 'Demandas',
							link: 'demanda'
						},
						{
							nome: 'Cadastro',
							link: 'nova-demanda',
							ativo: true
						}
					]
				}
			})
			.when('/visualizar-demanda/:id', {
				templateUrl: 'src/app/demanda/demanda-visualizar.html',
				controller: 'DemandaVisualizar',
				controllerAs: 'vm',
				titulo: 'Atualização de Demanda',
				cabecalho: {
					h1: 'Atualização de Demanda',
					breadcrumbs: [
						{
							nome: 'Demandas',
							link: 'demanda'
						},
						{
							nome: 'Atualização',
							link: 'visualizar-demanda',
							ativo: true
						}
					]
				}
			});
	}

})();
(function () {
	'use strict';

	angular
		.module('app.demanda')
		.factory('demandaRest', dataservice);

	dataservice.$inject = ['$http', '$location', '$q', 'configuracaoREST', '$httpParamSerializer'];

	function dataservice($http, $location, $q, configuracaoREST, $httpParamSerializer) {
		var service = {
			buscar: buscar,
			buscarTodos: buscarTodos,
			buscarArquivosPorDemandaFluxo: buscarArquivosPorDemandaFluxo,
			salvar: salvar,
			salvarFluxo: salvarFluxo
		};

		return service;

		function buscarArquivosPorDemandaFluxo(data) {
			return $http.get(configuracaoREST.url + 'demanda-fluxo/buscar-arquivos/' + data);
		}

		function buscar(data) {
			return $http.get(configuracaoREST.url + configuracaoREST.demanda + 'buscar/' + data);
		}

		function buscarTodos(data) {
			return $http.get(configuracaoREST.url + configuracaoREST.demanda);
		}

		function salvar(data) {
			return $http.post(configuracaoREST.url + configuracaoREST.demanda + 'salvar', data);
		}

		function salvarFluxo(data, id) {
			return $http.post(configuracaoREST.url + 'demanda-fluxo/salvar/' + id, data);
		}
	}
})();
(function () {
	'use strict';

	angular 
		.module('app.demanda')
		.controller('DemandaLista', DemandaLista);

	DemandaLista.$inject = [
		'$scope', 
		'demandaRest', 
		'tabelaUtils', 
		'controllerUtils'];

	function DemandaLista($scope, dataservice, tabelaUtils, controllerUtils) {
		/* jshint validthis: true */
		var vm = this;
		vm.tabela = {};
		vm.instancia = {};

		iniciar();

		function iniciar() {
			montarTabela();
		}

		function montarTabela() {
			criarOpcoesTabela();

			function carregarObjeto(aData) {
				controllerUtils.$location.path('visualizar-demanda/' + aData.id_demanda);
				$scope.$apply();
			}

			function criarColunasTabela() {
				vm.tabela.colunas = tabelaUtils.criarColunas([
					['titulo', 'Título'], 
					['solicitante', 'Solicitante'], 
					['dt_criacao', 'Data de Criação'], 
					['prazo_final', 'Prazo de Entrega'], 
					['situacao', 'Situação Atual'], 
					['id_demanda', 'Ações', tabelaUtils.criarBotaoPadrao]
				]);
			}

			function criarOpcoesTabela() {
				vm.tabela.opcoes = tabelaUtils.criarTabela(ajax, vm, remover, 'data', carregarObjeto);
				criarColunasTabela();

				function ajax(data, callback, settings) {
					dataservice.buscarTodos(tabelaUtils.criarParametrosGet(data)).then(success).catch(error);

					function error(response) {
						controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao carregar a lista.');
					}

					function success(response) {
						callback(controllerUtils.getData(response, 'datatables'));
					}
				}
			}

			function remover(aData) {
				dataservice.remover(aData.id_pessoa).then(success).catch(error);

				function error(response) {
					controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao remover.');
				}

				function success(response) {
					controllerUtils.feedMessage(response);
					if (response.data.status == 'true') {
						tabelaUtils.recarregarDados(vm.instancia);
					}
				}
			}
		}
	}
})();
(function () {

	'use strict';

	angular.module('app.demanda')
		.controller('DemandaForm', DemandaForm);

	DemandaForm.$inject = [
		'controllerUtils',
		'pessoaRest',
		'demandaRest',
		'$scope',
		'tipoDemandaRest',
		'datepicker',
		'datepickerSemLimite',
		'FileUploader',
		'configuracaoREST'];

	function DemandaForm(controllerUtils, pessoaRest, dataservice, $scope, tipoDemandaRest, datepicker, datepickerSemLimite, FileUploader, configuracaoREST) {
		/* jshint validthis: true */
		var vm = this;

		vm.atualizar = atualizar;
		vm.demanda = {};
		vm.editar = false;
		vm.filtrarPessoa = filtrarPessoa;
		vm.habilitarDesabilitar = habilitarDesabilitar;
		vm.salvar = salvar;
		vm.solicitanteList = [];
		vm.tipoDemandaList = [];
		vm.uploader = new FileUploader({url: configuracaoREST.url + 'upload'});
		vm.uploader.onSuccessItem = sucessoAoEnviarArquivo;
		vm.uploadHabilitado = false;
		vm.voltar = voltar;
		
		vm.teste = teste;

		iniciar();

		function teste() {
			console.log(vm.demanda);
		}

		function atualizar(formulario) {
			// dataservice.atualizar(vm.pessoa.id_pessoa, dto.criarAtualizar(vm.pessoa)).then(success).catch(error);

			// function error(response) {
			// 	controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao atualizar a pessoa.');
			// }

			// function success(response) {
			// 	controllerUtils.feedMessage(response);

			// 	if (response.data.status == 'true') {
			// 		voltar();
			// 	}
			// }
		}

		function carregarSolicitantes() {
			return pessoaRest.buscarCombo().then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				return controllerUtils.promise.criar(true, array);
			}
		}

		function carregarTipoDemanda() {
			return tipoDemandaRest.buscarTodos().then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'datatables');
				return controllerUtils.promise.criar(true, array);
			}
		}

		function editarObjeto() {
			vm.editar = !angular.equals({}, controllerUtils.$routeParams);
			return !angular.equals({}, controllerUtils.$routeParams);
		}

		function filtrarPessoa() {
			if (vm.filtrar) {
				pessoaRest.buscarComboFiltro({filtro: vm.filtrar}).then(success).catch(error);
			} else {
				controllerUtils.feed(controllerUtils.messageType.WARNING, 'Para filtrar é necessário inserir dados.');	
			}

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao filtrar os solicitantes.');	
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				
				if (array.length > 0) {
					vm.solicitanteList = array;
					controllerUtils.feed(controllerUtils.messageType.INFO, 'O filtro foi aplicado. ' + array.length + ' encontrado(s).');	
				} else {
					controllerUtils.feed(controllerUtils.messageType.WARNING, 'Nenhum registro encontrado para o filtro informado.');	
				}
			}
		}

		function habilitarDesabilitar() {
			vm.uploadHabilitado = !vm.uploadHabilitado;
		}

		function inicializarObjetos(values) {			
			if (values[0].exec) {
				vm.solicitanteList = values[0].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar as pessoas.');
			}

			if (values[1].exec) {
				vm.tipoDemandaList = values[1].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar os tipos de demanda.');
			}

			if (editarObjeto()) {
				if (values[2].exec) {
					vm.pessoa = values[2].objeto;
				} else {
					controllerUtils.feed(controllerUtils.messageType.ERROR, 'Não foi possível carregar os dados da pessoa.');
				}
			}
		}

		function iniciar() {
			$('#dtContato').datepicker(datepicker);
			$('#prazoFinal').datepicker(datepickerSemLimite);

			var promises = [];

			promises.push(carregarSolicitantes());
			promises.push(carregarTipoDemanda());
			
			if (editarObjeto()) {
				promises.push(carregarPessoa(controllerUtils.$routeParams.id));
			}

			return controllerUtils.ready(promises).then(function (values) {
				inicializarObjetos(values);
			});
		}

		function salvar(formulario) {

			var possuiArquivoPendente = false;

			if (vm.uploader.queue.length == 0) {
				dataservice.salvar(vm.demanda).then(success).catch(error);
			} else {
				angular.forEach(vm.uploader.queue, function (value, index) {
					if (!(value.isSuccess || value.isError)) {
						possuiArquivoPendente = true;
					}

					if (index === (vm.uploader.queue.length - 1)) {
						if (possuiArquivoPendente) {
							$.confirm({
							    text: "O formulário possui arquivos que ainda não foram enviados, deseja ignora-los?",
							    title: "Confirmação",
							    confirm: function(button) {
							        dataservice.salvar(vm.demanda).then(success).catch(error);
							    },
						        confirmButtonClass: "btn-danger btn-flat",
						        cancelButtonClass: "btn-default btn-flat",
							    confirmButton: "Sim, registrar sem os arquivos!",
							    cancelButton: "Não, aguardar o envio",
							    dialogClass: "modal-dialog modal-lg"
							});
						} else {
							dataservice.salvar(vm.demanda).then(success).catch(error);
						}
					}
				});
			}			

			function error(response) {
				console.log(response);
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao registrar a demanda.');
			}

			function success(response) {
				console.log(response);
				controllerUtils.feedMessage(response);

				if (response.data.status == 'true') {
					voltar();
				}
			}
		}

		function sucessoAoEnviarArquivo(fileItem, response, status, headers) {
        	if (response.exec == true) {
        		if (!vm.demanda.arquivos) {
        			vm.demanda.arquivos = [];
        			vm.demanda.arquivos.push(response.nome);
        		} else {
        			vm.demanda.arquivos.push(response.nome);
        		}

        		fileItem.isError = false;
        		fileItem.isCancel = false;
        	} else {
        		fileItem.isError = true;
        		fileItem.isSuccess = false;
        		fileItem.isCancel = false;
        	}
        };

		function voltar() {
			controllerUtils.$location.path('demanda');
		}
	}

})();
(function () {

	'use strict';

	angular.module('app.demanda')
		.controller('DemandaVisualizar', DemandaVisualizar);

	DemandaVisualizar.$inject = [
		'controllerUtils',
		'$scope',
		'FileUploader',
		'configuracaoREST',
		'demandaRest',
		'pessoaRest',
		'situacaoRest'];

	function DemandaVisualizar(controllerUtils, $scope, FileUploader, configuracaoREST, demandaRest, pessoaRest, situacaoRest) {
		/* jshint validthis: true */
		var vm = this;

		vm.demanda = {};
		vm.descricao = null;
		vm.destinatarioList = [];
		vm.situacaoList = [];
		vm.filtrarPessoa = filtrarPessoa;
		vm.demandaFluxo = {};
		vm.habilitarDesabilitar = habilitarDesabilitar;
		vm.uploader = new FileUploader({url: configuracaoREST.url + 'upload'});
		vm.uploader.onSuccessItem = sucessoAoEnviarArquivo;
		vm.salvar = salvar;
		vm.setarDescricao = setarDescricao;
		vm.setarArquivos = setarArquivos;

		vm.teste = function () {
			console.log(vm.demandaFluxo);
		}

		iniciar();

		function carregar() {
			return demandaRest.buscar(controllerUtils.$routeParams.id).then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'DemandaDto');
				return controllerUtils.promise.criar(true, array);
			}
		}

		function carregarDestinatarios() {
			return pessoaRest.buscarCombo().then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				return controllerUtils.promise.criar(true, array);
			}
		}

		function carregarSituacao() {
			return situacaoRest.buscarCombo().then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				return controllerUtils.promise.criar(true, array);
			}
		}

		function carregarArquivosDemanda(id) {
			return demandaRest.buscarArquivosPorDemandaFluxo(id).then(success).catch(error);

			function error(response) {
				return controllerUtils.promise.criar(false, []);
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				vm.arquivos = array;
				return controllerUtils.promise.criar(true, array);
			}
		}

		function filtrarPessoa() {
			if (vm.filtrar) {
				pessoaRest.buscarComboFiltro({filtro: vm.filtrar}).then(success).catch(error);
			} else {
				controllerUtils.feed(controllerUtils.messageType.WARNING, 'Para filtrar é necessário inserir dados.');	
			}

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao filtrar os solicitantes.');	
			}

			function success(response) {
				var array = controllerUtils.getData(response, 'ArrayList');
				
				if (array.length > 0) {
					vm.destinatarioList = array;
					controllerUtils.feed(controllerUtils.messageType.INFO, 'O filtro foi aplicado. ' + array.length + ' encontrado(s).');	
				} else {
					controllerUtils.feed(controllerUtils.messageType.WARNING, 'Nenhum registro encontrado para o filtro informado.');	
				}
			}
		}

		function habilitarDesabilitar() {
			vm.uploadHabilitado = !vm.uploadHabilitado;
		}

		function inicializar(values) {
			if (values[0].exec) {
				vm.demanda = values[0].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao carregar a demanda.');	
			}
		}

		function inicializarObjetos(values) {
			if (values[0].exec) {
				vm.demanda = values[0].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao carregar a demanda.');	
			}

			if (values[1].exec) {
				vm.destinatarioList = values[1].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao carregar os destinatários.');	
			}

			if (values[2].exec) {
				vm.situacaoList = values[2].objeto;
			} else {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao carregar as situações');	
			}
		}

		function iniciar() {
			var promises = [];

			promises.push(carregar());
			promises.push(carregarDestinatarios());
			promises.push(carregarSituacao());

			return controllerUtils.ready(promises).then(function (values) {
				inicializarObjetos(values);
			});	
		}

		function salvar(formulario) {

			var possuiArquivoPendente = false;

			if (vm.uploader.queue.length == 0) {
				demandaRest.salvarFluxo(vm.demandaFluxo, controllerUtils.$routeParams.id).then(success).catch(error);
			} else {
				angular.forEach(vm.uploader.queue, function (value, index) {
					if (!(value.isSuccess || value.isError)) {
						possuiArquivoPendente = true;
					}

					if (index === (vm.uploader.queue.length - 1)) {
						if (possuiArquivoPendente) {
							$.confirm({
							    text: "O formulário possui arquivos que ainda não foram enviados, deseja ignora-los?",
							    title: "Confirmação",
							    confirm: function(button) {
							        demandaRest.salvarFluxo(vm.demandaFluxo, controllerUtils.$routeParams.id).then(success).catch(error);
							    },
						        confirmButtonClass: "btn-danger btn-flat",
						        cancelButtonClass: "btn-default btn-flat",
							    confirmButton: "Sim, registrar sem os arquivos!",
							    cancelButton: "Não, aguardar o envio",
							    dialogClass: "modal-dialog modal-lg"
							});
						} else {
							demandaRest.salvarFluxo(vm.demandaFluxo, controllerUtils.$routeParams.id).then(success).catch(error);
						}
					}
				});
			}			

			function error(response) {
				controllerUtils.feed(controllerUtils.messageType.ERROR, 'Ocorreu um erro ao registrar o fluxo da demanda.');
			}

			function success(response) {
				controllerUtils.feedMessage(response);

				if (response.data.status == 'true') {
					vm.demandaFluxo = {};
					vm.uploader.clearQueue();
					controllerUtils.ready([carregar()]).then(function (values) {
						inicializar(values);
					});	
				}
			}
		}

		function setarArquivos(id) {
			carregarArquivosDemanda(id);
			$('.modalArquivos').modal('show');
		}

		function setarDescricao(descricao) {
			vm.descricao = descricao;
			$('.modalDescricao').modal('show');
		}

		function sucessoAoEnviarArquivo(fileItem, response, status, headers) {
        	if (response.exec == true) {
        		if (!vm.demandaFluxo.arquivos) {
        			vm.demandaFluxo.arquivos = [];
        			vm.demandaFluxo.arquivos.push(response.nome);
        		} else {
        			vm.demandaFluxo.arquivos.push(response.nome);
        		}

        		fileItem.isError = false;
        		fileItem.isCancel = false;
        	} else {
        		fileItem.isError = true;
        		fileItem.isSuccess = false;
        		fileItem.isCancel = false;
        	}
        }

		function voltar() {
			controllerUtils.$location.path('demanda');
		}
	}

})();